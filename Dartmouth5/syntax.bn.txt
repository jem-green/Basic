The following represents a proposed ISO/IEC 14977 standard, by R. S. Scowen, page 7, table 1.

definition	=
concatenation	,
termination	;
alternation	|
optional	[ ... ]
repetition	{ ... }
grouping	( ... )
terminal string	" ... "
terminal string	' ... '
comment	(* ... *)
special sequence	? ... ?
exception	-

 * repetition-symbol
 - except-symbol
 , concatenate-symbol
 | definition-separator-symbol
 = defining-symbol
 ; terminator-symbol
 . terminator-symbol


DATA
DEF
DIM
END
FOR
GOSUB
GOTO
IF-THEN
LET
NEXT
PRINT
READ
REM
RETURN
STOP


<program> = <line> [ <line> ]* ;
<line> = <line_number> , <statement> [ <statement-separator> , <statement> ]* , <eol> ;
<line-number> = <digit> [ <digit> ]* ;
<digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0" ;
<statement-separator> = ":" ;
<eol> = <cr> , <lf> | <cr> ;
<number> ::= <digit> [ "." ] <digit> ; 
<letter> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
<character> = <letter> | <digit> | <symbol> ;
<symbol> =  "|" | " " | "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | ">" | "=" | "<" | "?" | "@" | "[" | "\" | "]" | "^" | "_" | "`" | "{" | "}" | "~"
<variable> = <letter> | <letter> , <digit>
<statement> = <Data-Statement> | <Def-Statement> | <Dim-Statement> | <End-Statement> | <for-Statement> | <IfStatement> | <LetStatement> | <DimStatement>

<Data-Statement> = "DATA" , <number> , [ "," <number> ]* ;
<Def-Statement> = "DEF FN" , <letter> , "(" , <variable> , ")" , "=" , <expression> ;
<Dim-Statement> = "DIM" , ("(" , <integer> , ")") | ( "(" , <integer> , "," , <integer> ) 
<IfStatement> = "IF" <relation> "THEN"
<relation> ::= <expression> <relop> <expression>
<relop> ::= "<" | ">" | "=" | "<=" | ">="

<LetStatement> ::= "LET" <variable> "=" <expression> [ <separator> <variable> "=" <expression> ]*
<variable> ::= <string_variable> | <numeric_variable> | <array_variable>
<string_variable> ::= <alpha> [<digit>] "$"
<numeric_variable> ::= <alpha> [<digit>]
<array_viarable> ::= <alpha> [<digit>] "(" <expression> [ <separator> <expression> ]* ")" 

<DimStatement> ::= "DIM" <array_variable> [ <separator> <array_variable> ]*

<PrintStatement> ::= "PRINT" <string_variable> | <numeric_variable> | <expresion> | "TAB" "(" <expression> ")" | "

<expression> ::= <term> [ <addop> <term> ]*
<addop> ::= "+" | "-"
<term> ::= <factor> [ <mulop> <factor> ]*
<mulop> := "*" | "/"
<factor> ::= <number> | <string> | <variable> | <function> | "(" <expression> ")"
<function> ::= <name> "(" <expression> [ <separator> <expression> ]* ")"
<separator> ::= ","
<string> ::= <quote> <alpha> [ <alpha> ]* <quote>
<quote> ::= """ | "'"