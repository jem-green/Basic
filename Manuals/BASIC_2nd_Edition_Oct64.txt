BASIC
Dartmouth College
Computation Center
1 October 1964BASIC
A Manual for BASIC, the elementary
algebraic language designed for use
with the Dartmouth Time Sharing System.

1 October 1964
©
Copyright 1964 by the Trustees of
Dartmouth College. Reproduction for
non- commercial use is permitted provided
due credit is given to Dartmouth College.The development of the BASIC Language,
and of this Manual? has been supported
in part by the National Science Foundation
under the terms of Grant NSF GE 3864.II
III
IV
TAB LE OF CONTENTS
What is a Program
A BASIC Primer
2. 1 An Example
2.2 Expressions, Numbers, and Variables
2. 3 Loops
2. 4 Use of the Time Sharing System
2. 5 Errors and Debugging
2. 6 Summary of Elementary BASIC Statements
More Advanced BASIC
3. 1 More About PRINT
3. 2 Lists and Tables
3. 3 Functions and Subroutines
3. 4 Some Ideas for More Advanced Programmers
Card BASIC
4, 1 Purpose
4. 2 How to Prepare a Deck
4. 3 Differences in Operation
4. 4 MAT
Appendices
A. Error Stops
B. Limitations on BASIC
C. The 15 BASIC Statements
12
14
21
26
31
31
36
39
43
50
50
50
50
51
53
53
55
56I
WHAT IS A PROGRAM?

A program is a set of directions, a recipe, that is used to provide
an answer to some problem. It usually consists of a set of instructions to
be performed or carried out in a certain order. It starts with the given
data and parameters as the ingredients, and ends up with a set of answers
as the cake. And, as with ordinary cakes, if you make a mistake in your
program, you will end up with something else -- perhaps hash!

Any program must fulfill two requirements before it can even be
carried out. The first is that it must be presented in a language that is
understood by the ”computer. " If the program is a set of instructions for
solving linear equations, and the "computer" is a person, the program will
be presented in some combination of mathematical notation and English. If
the person solving the equations is a Frenchman, the program must be in
French. If the "computer" is a high speed digital computer, the program
must be presented in a language the computer can understand.

The second requirement for all programs is that they must be
completely and precisely stated. This requirement is crucial when dealing
with a digital computer, which has no ability to infer what you meant -— it
can act only upon what you actually present to it.

We are of course talking about programs that provide numerical
answers to numerical problems. To present a program in the English
language, while easy on the programmer, poses great difficulties for the
computer because English, or any other spoken language, is rich with
-1-ambiguities and redundancies, those qualities which make poetry possible
but computing impossible. Instead? you present your program in a language
that resembles ordinary mathematical notation, which has a simple vocabu-
lary and grammar, and which permits a complete and precise specification
of your program. The language that you will use is BASIC (Eeginner’s all}
purpose Symboliclnstruction gode) which is at the same time precise,
simple, and easy to understand,
Your first introduction to the BASIC language will be through an ex-
ample. Next you will learn how to use the Dartmouth Time Sharing System
to execute BASIC programs. Finally, you will study the language in more
detail with emphasis on its rules of grammar and on examples that show
the application of computing to a wide variety of problems.II
A BASIC PRIMER
2. l _A£ Example
The following example is a complete BASIC program for solving
two simultaneous linear equations in two unknowns with possibly several
different right hand sides. The equations to be solved are
A1X1+ AZXZ = B1
A3X1" A4X2 = 32
Since there are only two equations, we may find the solution by the
 
formulas ,
1: ———-—-——— 2 =
(A A - A
1 4 3A2) (A1A4- A3142)
It is noted that a unique solution does not exist when the denominator
A1A4-A3Az is equal to zero. Study the example carefully -- in most cases
the purpose of each line in the program is self-evident.

10 READ Al, A2, A3, A4
15 LETD=A1*A4-A3*A2
20 IF D ='0 THEN 65
30 READ B1, BZ
37 LET X1=(B1*A4 - 132 * A2) / D
42 LET X2 =(A1*IB2. - A3 * B1)/D
55 PRINT x1, x2
60 G0 To 30
65 PRINT ”NQ UNIQUE SCDLUTICDN”
70 DATA 1, 2,4
80 DATA 2., -7, 5
85 DATA 1, 3, 4, -7
90 ENDWe immediately observe several things about the above sample
program. First, all lines in the program start with a line number. These
serve to identify the lines in the program, each one. of which is called a
statement; thus, a program is made up of statements, most of which are
instructions to be performed by the computer. These line numbers also
serve to specify the order in which the statements are'to be performed by
the computer, which means that you could type your 'prOgram in any order.
Before the program is run by the computer, it Isortsout and edits the pro-
gram, putting the statements into the order specified by their line numbers.
(This editing process makes extremely simple the correcting and changing
of programs, as will be explained in later sections. )
The second observation is that each statement starts, after its
line number, 'with an English word. _ This word denotes the type of the
statement. There are fifteen types of statements in BASIC, nine of which
are discussed inthis chapter. Of these nine, seven appear in the sample
program above. .

I The’third observation is that we use only capital letters, and that
the letter I"Oh” is distinguished from the numeral "Zero" by having a diag-
onal slash through the "Oh". This feature'is made necessary by the fact
that in a computer program it is not always possible to tell from the con-
text whether the letter or the number was intended unless they have a dif-
ferent appearance. This distinction is made automatically by'the teletype
machine, which also has a special key for the number "One" to distinguish
it from the letter "Eye” or lower case ”L".

A fourth observation, though perhaps less obvious than the first
three, is that spaces have no significance in BASIC (except in messages
_ -4-w bep'rinted out as shown in statement number 65.) Thus, spaces may be
used, or not used, at will to "pretty up" a program and make it more read-
able. For'ins‘tance, statement 15 could have been typed as
15 LETD=A1*A4-A2*A3
a fully equivalent though less readable form.

Turning now to the individual statements in the program, we observe
that the first statement, numbered 10, is a READ statement. When the
computer encounters a READ statement while executing year pifﬁgi‘aﬁi, it
will cause the variables whose names are listed after the READ" 1565?: given
values according to the, next available numbers in the DATA Statements.
.Thus, in the example, when statement 10 is first encountered, it will cause
the ‘variable‘Al to be given the value 1, the variable A2 to be given the value
2, the variable A3‘to be given the value 4, and the variable A4 to be given
the value 2 .

The next statement, numbered 15, is a LET statement. It causes
the computer to compute the value of the expression A1A4 .- A3A2, ,
and to assign this value to the variable D. The expression computed in a
LET statement can range from the very simple (consisting of only a single
variable) to the very complex. The rules for forming these expressions are
given in detail in'the next section, but for now we point out that:
l. ‘ Variable names consist of a single capital letter
possibly followed by a single digit;
‘2. The symbol ‘* (asteriSk) is always used to’ denote
. multiplicatiOn;
.3. . ,Parentheses may be needed to specify the order of the
computation because the entire expression must appear
on a single line;4. No subscripts, or superscripts as such are permitted,
also because the expression must appear on a single line.
In line 20 the computer asks a question:- {'13 D’eQual to 0?" i If the
answer is yes, then the next statement to be executed by the. computer is
the one numbered 65. If the answer is no. the computer continues to state-
ment 30, the next higher-"anumberednoneﬂaitek 20.

In line 30the computer causes the variables BI and BZ to be given
the values next appearing in the DATA statements elsewhere in the program.
Since the first four data have already been used up, B1 is given the fifth
value -7, and B2 is given the sixth value '5.

The statements numbered 37 and 42 complete the computation of
the solution, X1 and X2. Notice that the denominator has been previously
evaluated as the variable D. Thus it is not necessary to repeat the formula
given in statement 15. Notice also how parentheses are used to specify that
the numerator of the fraction consists of the entire quantity Bl*A4 - BZ*AZ .
If the parenthes-eslhadbeen omitted by mistake, the expression computed
B2*A2 . . .
would have been B1*A4 - T , which is incorrect.

Now that the answers have been computed, they will be printed out
for you to see when the computer encOunters statement 55. Notice that the
comma is used to separate the individual items in the list of quantities to
be printed out at that time.

Having completed the ‘computationr statement 60 tells the camputer
to execute next statement number 30. we observe that the second encounter
of statement 30 will cause the variables Bl and'B‘Zto be given the values
1 and 3, respectively, the next available ones in the DATA statements.After completing the computation for the second set of right hand
ﬁght! and printing the answers, the computer will give the last values, 4
and -7. ta thevariable B1 and B2, compute and print the third set of an-
swers. and then stop, because there is no more data when the READ state-
ment 30 is enCountered for the fourth time.

If D, the determinant of the coefficients, is zero. we know that the
set of equations does not have a unique solution. In this case, statement 20
will cause'the' computer to execute statement 65 next. Statement 65 is again
a PRINT statement, but instead of numerical answers being printed out, it
will produce the English message
NQ UNIQUE S¢LUTI¢N
We could have used any other recognizable message between the two quota-
tion marks that would have indicated to us that no unique solution was pos-
sible for the, given coefficients.

After printing the warning message the computer will execute next
statement 90, an END statement, which stops the running‘of the program.
(The running will also be stopped when a READ statement is encountered
for which there is not sufficient data. ) It is extremely important to remem-
ber that all programs must have an END statement, and that it must always
be the highest numbered statement in the program. The intervening DATA
statements are never executed by the computer; therefore, they may be
placed anywhere in your program. The only requirement is that END be
the highest numbered statement, including DATA statements, and that
DATA statements are numbered in the order in which you wish the data to
be used by the various READ statements in your program.2...Z., 13:52 ressions, Numbers, and Variables
 
Eatpressions in BASIC look like mathematical formulas. and are
formed from numbers, variables, Operations, and functions.

A number may contain up to nine digits with or without a. decimal
 
point, and possibly with a minus sign. For example, the following numbers
are acceptable in'BASIC:
5 ,_ Z. 5 123456789 . 123456789 ~123456
To extend the range of numbers, a factor of a power of ten may be attach-
ed, using the letter E to stand for "times ten to the power". Again, the
following examples are all acceptable forms for the same number in BASIC,
-12..345 . -12345 E-3 -. 12345E2 ~12345000E-6 -. 000'12345E5
It should be noted, however, that the E notation cannot stand alone; 1000
may be written IOEZ or 1E3 but not E3 (which looks like a variable and is
so interpreted in BASIC.) It should also be noted that . 000123456789 is il-
legal, and must be written as, say, . 123456-789E-3. .

A variable in BASIC is denoted by any letter, or by any letter fol-
lowed by a digit. For instance, these are acceptable variable names:
A x N5 , . X0 K9 . (231.

The difference‘between 0 and Q, and between I and 1 should be observed.
Thus, IO is acceptable while any of IQ. MD. and 10 are not (the last one is
the number ten.)

A variable in BASIC stands for a number, usually one that is notknown to the programmer. at the time the program was written. Variables
are given or assigned values by. LET and READ statements. The value so
assigned will not change until the next time a LET or READ statement is
encounteredthat names that variable.

Expressions are formed by combining variables and numbers to-
gether with arithmetic Operations and parentheses just as in ordinary mathe-
matical formulas. The symbols
+ I - “t * / _ 1‘
stand for ”plus”, "minus", “times”, “divided by“, and "to the pewer“, FF)
respectively. Parentheses are used in the usual way, as in
(A1 + X)*(B - CTN)
Because expressions must be presented as a single line, parentheses are
often required where they might not be needed in ordinary mathematical
notation. Thus ,
A - B is written as (A - B)/C
C ' ’
 
to show that the entire quantity A - B is to be divided by C. Omitting the
parentheses would leave A - B/C5, which is interpreted as A - (B/C)
Another example that arises quite often is
 
A A/(B*C)
which is Written as or
13*? C A/B/C
A/B*C willybe interpreted the same as (A/B)*C or (A*C)/B
 
(if) The operation actually works with the absolute value of the left
argument. Thus X’I‘ Y is interpreted as [XI T Y . If X could be negative
and you want X’]\3 , you should write X*X*X or X*XT'2The Way that expressions are interpreted can be summarized in
terms of several rules, which correspond to standard mathematical nota-
tion. These are: "
l. The expression inside a parentheses pair is computed
before the parenthesized quantity is used in further
computations.

2. Raising to a power is computed before multiply and / or
divide, which in turn are computed before addition and/or
subtraction, in the absence of parentheses.

3. Several multiply-divides, or several addition-subtractions,
are computed from left to right.

The first rule tells us that in (A + B)*C we compute A + B first,
then multiply the result by C, an obvious interpretation. The second rule
tells us that in A + B*CT‘ D we first compute CTD , then multiply by
B, and finally add to A. An equivalent expression is A + (B*(C’l\ D)) .
The third rule states that A — B - C is interpreted as (A - B) - C and not
as A - (B - C) . Applied to multiplies and divides, the rule tells us to
interpret A/B/C as (A/B)/C and not as A/(B/C) . For raising to a
power, AT B T‘ C means (A TB) TC or, equivalently, AT(B*C) . If you
intend AT(BT C) , you must use that form.

In addition to the arithmetic operations, some of the more common
standard functions are available. For example, to compute w
you would use SQR(1 + XT 2) . The other standard functions are used in
this same way, that is, the BASIC name of the function followed by the
argument enclosed in parentheses.

-10-Function name Pur Bose
 
SIN(X) sine of X
, X must be expressed
C¢S{X) ’ cosine of X in radian measure.
'TAN(X)I ‘ ' V tangent, of X
ATN(X) I I \ I ' arctangent (in radians) of X
EXP(X) l natural exponential of X, eX
ABS(X) ' ~ " absolute value of x, [x]
L¢G(X) natural logarithm of [Xi
SQR(X) ‘ H square root of pf!

(Two other functions, RND(X) and INT(X), are explained in section 3. 3)
The argument of a function may be any expression, no matter how compli-
cated. For example
SQR(. B432 .- 4*A*C ) - 17
Z - EXP( X1 + LI¢G(> A/Xl )) * TAN(A)
som SIN(Q)1‘r 2 + cosmw 2 )
are all acceptable in BASIC.

The use of the LQSG and SQR functions requires a word of caution.
In each case the argument is made positive befOre applying the function,
since neither function is defined for negative arguments. Many times,
though notalways, an attempt to have the computer extract the square
root of a negative number implies a fundamental error in the program. The
user should be forewarned that such occasions, hopefully rare, may there-
fore be unnoticed.

The user may define new functions using the DEF statement, which
is discussed in section 3.3.

-11-2. 3 Loops
Perhaps the single. most important programming idea is that of a
loop. While we can write useful programs in which each statement is per-
formed only once, such a restriction places a substantial limitation on the
power of the computer. Therefore, we prepare programs that have portions
which are performed not once but many times, perhaps with slight changes
each time. This 'flooping back" is present in the first program, which can be
used to solve not one but many sets of simultaneous linear equations having
the same left hand sides.

‘Making tables of,‘ say, square rOOts is another example where a loop
is necessary. Suppose that we wish to have the computer print a table of
the first hundred whole numbers and their square roots. Without 100ps, one
can easily see that aprogram would require 101 lines, all but the last hav-
ing the form:
17 PRINT 1?, SQR(17)
And if one wished to go not to 100 but to SQ only, a new program would be
required, ‘Finally, if one. wanted to go to 10, 000 the program would be ab-
surd even if someone could be found to write it all down.

We notice that the basic computation, in this case a very simple
printing, is practically the same in all cases -- only the number to be print-
ed changes. The following program makes use‘of a loop:
10 LET X = 0
20 LET X = X + l
30 PRINT X, SQR(X)
40 IF' X4<=100 THEN 20
50 END
Statement 10, which gives to X the value 0, is the initialization of the loop.

Statement 20, which increases the value of X by unity, is the statement thatinsures that the loop is not merely repeting exactly the same thing -- an
infinite loop! Statement 30 is the body of the loop, the computation in'which
we are interested. And statement 40 provides an exit from the leop after
the desired computation has been completed. All loops contain these four
characteristics: initialization, modification each time through the loop, the
body of the loop, and a way to get out.

Because'loops are so important, and because loops of the type shown
in the example arise so often, BASIC provides two statements to enable one
to specify such a loop much more concisely. They are the FQR and the
NEXT statements, and would be used as follows in the example above:
10 FOR X :1 T0) 100
20. PRINT X, SQR(X)
30 NEXT X
.40 END
Statement 10: contains both the initial and final values of X. Statement 30
specifies that X be increased to its next value. In this case, the value by
which X is increased each time is implied to be unity. If'instead we wished
to print the square roots 'of the first 50 even numbers, we would have used
10 FQR X = 2 T¢ 100 STEP 2
20 PRINT X, SQR(X)
30 NEXT X
40 END
Omitting the STEP part is the same as assuming the step-size to be unity.

To print the square roots of the multiples of 7 that are less than
100, one might use for line number 10
. 10 F¢R X.= 7 T0) 100 STEP 7
The loop will be performed for all values of X that are less than or equal
to 100, in this. cm, for x equal to 7; 14, , 91, 98
.13-2. 4 Use of theTime Sharing System
“——
 
The- Dartmouth Time Sharing System consistsof a large central . 1
computer with a}, number of input-output station-s (currently, model 35 teley-I
type machinesr‘)’ Individuals using the inputboutputustations are able to I
"share" the use of the computer with each other in such a way as to suggest
that'they each have sole use of the computer. The teletype machines are
the devices through which'the-user communicates with the computer.

g Teletype machines are like ordinary typewriters, with certain mod—
ifications. to makerthem suitable for transmittingmessages over telephone
lines. They have. a nearly standard keyboard for letters and numbers, the
most notable differences being that all letters are capitals and that the
numeral one is not the same as the letter L. In addition there are several
special characters which can be typed using either of the two ”SHIFT" keys;
these include thefollowing special symbols that are used in BASIC programs:
+€ '.‘*IVI/V1f‘
,( )V<.'>i.l .. :7
There is a "CTRLll key that is related to standard te‘letype communications,
but all the control symbols are ignored; by BASIC. A layout of the keyboard
is shown on the following page. It should be studied until the locations of
these symbols are familiar.
There are three special keys that the user must know about;
"RETURN”, which is located at the right hand end of the third
= , row of keys,‘ is the ordinary carriage return. More
importantly, the computer ignores all typed lines
until this key is pressed. It must be used after each
line in a BASIC program, and after each line which
-14-e@,©©®@0@@@.09
OOO@®®OOOO..
CO.@O®®@OO®O@
C...’®OO@O@©is a communication to the system‘
"(—L" , which is located on the letter ”Oh" key while the
"SHIFT" key is depressed, erases the last character
typed. If the user notices that he has just mistyped
a letter or a symbol, he pushes this key, which tells
the computer to ignore the preViOusly typed character.
Pushing the backwards arrow more than once will
delete the same number of characters, but only to the
start of the line. For example, the sequence
ABCWTéQ'DE will appear as ABCDE
while
100 LETe-eeeu—ezoo LET X = Y
will appear as
200 LET X = Y
"ALT MODE”, located at the left hand end of the third row of keys,
is pressed to delete an entire typed line. It may be
used- at anytime before ar‘”RETURN"' is.used. .7
Besides the keyboard itself, there are four buttonsthat are needed
to operate the teletype machine.

 
BUTTON ‘ FUNCTION
”ORIG:ll the leftmost Turns on the teletype machine.

of six small
buttons on the
right.

"CLR" next to "ORIG. " Turns off the teletype.

"LOC LF” , to the left of Feeds the paper to permit tearing bff.
the space bar.

"BUZ-RLS” , rightmost Turns ‘off the buzzer, which goes on
of the six small when the paper supply is low.
buttons.

All other buttons and gadgets, including the telephone dial, are 'not con-
ne cted.

~16- ,13;»;
When you sit down at a teletype machine, you must start by
typing
HELLQ
followed, as always, by a ”RETURN”. This starts the so-called HELLO)
sequence, a short series of questions and answers that serve to tell the
computer who you'are and what you‘wish to do .

Each user must have a user number. For students it is the six
digit student ID number. The user number for any other person consists
of a certain letter followed by five digits, and is assigned to the user by
the“ Computation Center. When the computer asks for ybur user number,
type it. (Don't forget the "RETURN”.)

The next information you must supply is the name of the system or
language; in this case it will be BASIC.

When the computer asks about NEW or (DLD, you type NEW unless
you wish to retrieve an (DLD program in order to continue working on it.

, Finally, the computer asks for the name of your problem. You
type any six letters, digits, or characters that you wish. If you are retriev-
ing an (DLD program, you must be careful to type the problem name exactly
as you typed it originally.

The computer types READY, and is now ready for you to type in
the new program, to add or change statements in an old’ program, or to
command the computer to do something with your program. You must be
careful to begin each statement in your program with a line number. These
line numbers should:
-- cOntain no more than five digits,‘
-17--- contain no spaces or non-digit characters,
-- start at the very beginning of the line.
After completely typing the program, you type
,RUN ‘
The computer will now analyze and run your program. It will then print
a line that contains your user number, the problem name, the date, and
the time of day. If there are no errors of form in the program, next will
be printed the answersaccording to the PRINT statements withinthe program.
(If the program runs for a long time, the teletype machine will periodical-
ly make little grinding noises, which indicate. that no output has yet been
produced. on the other hand, if a program is fairly short but produces
lots of output, you may notice that the printing may break off after a while
and commence somewhat later. During that interval, the computer is doing
the computing necessary to produce the next batch of output.) Finally, a
time statement is printed showing the total computing time used by the
run. (In many cases it will show 0 seconds, indicating that the entire run
required less than 0. 5 seconds.)

A complete history of a successful run of the linear equation solver
presented earlier is shown on the following page.

Besides HELLQ and RUN, there are several extremely useful
commands that may be given to the computer by typing at the start of a
new line the command followed by pressing the “RETURN"rkey.

STQ)P . causes the computer to stop whatever it is doing with
the program. ST(DP may be used even with the computer
' is typing out; in this case it responds to yOur simply
typing the letter S even without a "RETURN".
LIST will type out a complete listing of the program as it is,
including. all the corrections that have been made. To stop
-13-HELLE
USER NUMBER-'999999
SYSTEM--BASIC
NEW ER 0LD--NEW
NEW PRGBLEM NAME--LINEAR
READY.

10 READ Al, A2, A5, A4
15 LET D : Al * A4 - A3 * A2
20 IF D 3 0 THEN 65
so READ BI, 32
57 LET X1 = (31*A4 - 32 * A2 ) / D
42 LET X2 : C Al * BZ ' A5 * Bl)/D
55 PRINT x1,.x2
60 GE T3 50
65 PRINT "NZ UNIQUE SULUTIUN"
7o DATA 1, 2,4
so DATA 2, -7, 5
85 DATA 1’ 5, 4, -7
90 END ,
RUN '
USER ND. 999999 PRﬂBLEM NAME: LINEAR 6 SEPT. 1964 TIME: 22:33
4 #5.5
.666657 .166667
-3.66667 3.83333
TIME: 1 SECS.

-19-listing after it has started but before it is completed, type S.

LIST--XXXXX will type out a listing of the program starting at line number
SAVE
UNSA VE
CATALQG
NEW "
SCRATCH
R ENAME
XXXXX and continuing‘tothe end or'until theS key is pressed.
For instance, LIST-470 in the linear equationsproblem will
start listing at line 70, permitting the user to inspect the
DATA statements without waiting for the early part of the
program to be listed.

If the user is done working with a program at the moment
and wishes to return to it at a later time, he should save
it, For instance, if the user must leave the teletype and is
only half finished with the original typing, he types SAVE.
Later on, he retrieves exactly what he saved by typing
@LD. He may then continue with the typing as if nothing
had happened.

If a user has finished with a program that he has saved at
some earlier time, he types UNSAVE. This action destroys
the saved program, making room for other saved programs.
All users are urgently requested to UNSAVE all programs
for which they no longer have need.

In case a user is working with several different programs
and forgets what names he gave them, typing CATALOG re-
quests the computer to list the names of all programs cur—
rently being saved by that user.

Typing NEW‘will permit the'programmer to start anew
problem. This command may be given at any time, and has
the effect of erasing the previous program (unless it was
saved. ) The computer will ask for the name of the new
problem.

This command is similar to NEW, but retrieves the named
saved program, which may then be added to. Either OLD
or NEW must be used in connection with the HELLQ sequence,
but either may be also used at any later time as well. Re—
peated use—Sf—CDLD does not affect the saved program; it re-
mains saved until it is unsaved, or until'a new version is
saved in place of it.

This command is very close to NEW in that it erases the
previous work and presents a clean slate. It differs by
retaining the name of the previous problem instead of ask-
ing for a new name.

serves to supply a new problem name for the current work
without erasing it. It is useful if one wishes to save two
similar versions of a program. Save the first, use RENAME,
make the desired modifications, and then save or run the
modified version.

-20-When the user is finished with a session at the teletype, it is neces-
sary only to leave the machine. The user should plan his session at the
teletype to avoid long trances. If such happens, the user should save his
work, and leave the machine for someone else to use. Remember the
 
motto,
TYPING IS [NO SUBSTITUTE FOR THINKING.
2. 5 Errors ﬂ Debugging
 
It may occasionally happen that the first run of a new problem will
be error-free and give the correct answers. But it is much more common
that errors vwill be present and have to be corrected. Errors are of two
types: Errors of form, :or grammatical errors, that prevent even the run-
ning of the program; Logical errors in the program which cause wrong an-
swers or even no answers to be printed.

Errors of form will cause error messages to be printed out instead
of the expected answers. These messages give the nature of the error, and
the line number in which the error occurred. Logical errors are often much
harder to uncover, particularly when the program appears to give nearly
correct answers. But after careful analysis and when the incorrect state-
ment or statements are discovered, the correction is made by retyping the
incorrect line or lines, by inserting new lines, or by deleting existing lines.

These three kinds of corrections are made as follows:
Changing a line Type it correctly with the same line
number.
Inserting a line Type it with a line number between
those of the two (existing lines.

Deleting a line Type the line number only.

-21-NOtice that being able to insert a line requires that the Original line
numbers not be consecutive numbers. For this reason, mast users wil
start out using line numbers that are multiples of five Or ten, but‘that is
up to the m.

These corrections can be made at any time, either before or after
a run. They may even be made in an earlier part 3f the pregrain While you
are typing the later lines. Simply retype the offeiidiiiﬁ like with its original
line number, and then continue typing the rest oi the program
The whole process of locating errors or ”debugging“ a program is
illustrated by a case history which starts on the next page. It‘taies us
from the HELLO) sequence to the final successful printing of the correct
answers. The circled numbers refer to comments, which start be10w. For
convenience, the portions typed by the cOmputer are underlined or rnargin-
lined, although no underlining is used on the actual computer.

The problem is to locate the maximum point “on the sine curve be-
tween 0 and 3 by searching along the x-axis. The searching will be done
three times, first with a spacing of 0.1, thenwith spacings of 0. 01, and
0. 001. In each case will be printed the location of the maximum, the maxi-
mum, and the spacing. The program as first written dewn on paper was:
10 READ D
20 LET X0 = 0
30 F<DRX=OT<D3STEPD
40 IF SIN(X) 4: M THEN 100
50 LET X0 = X ,
6O LET M = SIN(XO)
70 PRINT X0, X, D
80 NEXT X0
90 GO) TO) 20
100 DATA .1, .01, .001
110 END
-22-HELLG
USER NUMBER--999999
SYSTEM--BASIC
NEW 0R @LD--NEW
NEW PRGBLEM NAME--MAXSIN
 
 
READY.

10 READ D
20 LWR X0 = 0
50 FER X = 0 T6 5 STRhEP D
40 IF SINE~(X) <1 M THEN 100 (:>
so LET x0 : x
60 LET M : SIN(X)
70 PRINT XE, x, D
80 NEXT x0
9 Ga TE 20
20 LET xo : o (:D
Loo»««loo DATA .1, .01, .001 <§._________________ (:)
110 END
RUN
 
USER NZ. 999999 PREBLEM NAME: MAXSIN 6 SEPT. 1964 TIME: 21:57
 
ILLEGAL FZRMULA IN 70
NET MATCHED wITH FER 1N so
FER WITHQUT NEXT EDEL—“"“““—-——~—(:)
TIME: 0 SECS.

/@
70 PRINT x0, x, D 4E._————'“"“"'__———<::)
40 IF SIN(X) <: M THEN 80
80 NEXT x (:9
RUN
 
USER N0. 999999 PRUBLEM NAME: MAXSIN 6 SEPT. 1964 TIME: 21:38
STEP (j)
READY.

 
E23-20 LET m : -1 M
RUN
'USER N3. 999999 PRQBLEM NAME: MAXSIN 6 SEPT. 1964 ‘TIME: 21:42
I
L\)
o
[\3
o o I o
I—bo—nI—oI-o
I: '3 \CD
85 PRINT X0, M, D
RUN
 
 
USER “3. 999999 PRﬁBLEM NAME: MAXSIN 6 SEPT. 1964 TIME: 21:45
1.6 .999574 .1
1.6 .999574 .1
1.6 .99 $
STZP.

90 GE Tﬁ 10
5 PRINT "X VALUE", "SINEZe", RESQLUTIQN"'<E-—————~———4:§)
RUN '
USER N9. 999999 PRQBLEM NAME: MAXSIN 6 SEPT. 1964 TIME: 21:44
INCGRRECT FERMAT IN 5 é-ﬂ'“ .

TIME: 1 SECS.

-24-5 PRINT "x VALUE", "SINE", "REseLUTIEN" <ér——————————_1:::>
RUN
USER NZ. 999999 sPRﬂBLEM NAME: MAXSIN 6 SEPT. 1964 TIME: 21:46
x VALUE SINE ” RESELUTlmN
1.6 .999574 .1
1.57 V 1. .01
1.571 1. .001 (E)
TIME: 1 MINS. 0 SECS.

USER NZ. 999999 PRESLEM NAME: MAXSIN 6 SEPT. 1964 TIME: 21:48
5 PRINT "X VALUE", "SINE", "RESQLUTIQN"
10 READ D
20 LET m_: -1 1 .
30 FER x : 0 T0 5 STEP 0
40 IF SIN(X) <: M THEN 80
50 LET x0 = x
60 LET M : SINCX)
so NEXT x
85 PRINT x0, M, 0
90 00 T0 10, ,
100 DATA .1, .01, .001
110 END
READY.

 
-25-10.

11.

12..

13.

2.6
Notice the use of the backwards arrow to correct mistakes as you
go along.

The user notices at this point that he had mistyped the word LET
earlier, and corrects it.

An inspection of statement 70 shows that a variable X0) is used,
which is illegal, when X0 was intended. The line is retyped cor-
rectly.

The variable in the NEXT statement should have been X instead of
X0, and the change is made.

By chance, the user notices that originally the IF-THEN statement
pointed to a DATA statement, and the correction is made.

The problem runs for a long time without any output. Since we ex-
pect output almost immediately, we suspect something is wrong. It
must be that the PRINT statement is forever bypassed. This could
happen only if M were so large that the IF- THEN statement was
always satisfied. We then observe that we forgot to initialize M to
some value less than the maximum value on the sine curve, so we
choose -1.'
At last we get printed output, but it appears that the printing is tak-
ing place each time through the loop rather than at the end of the
100p. We move the print statement from before to after the NEXT
statement, and incidentally change it to print M rather than X as
the second term.

Ugh. Still not correct. We seem to be doing the first case over and
over again. An infinite loop! This is corrected by going back to
statement 10 instead of statement 20.

While we are at it, we put in labels to identify each column in the
printed output.

Forgot the opening " for the third label.
We finally obtain the desired answers.
The final corrected version of the program is listed.

The program is saved for later.use. (This should not be done unless
future use is necessary.)

Summary of Elementary BASIC Statements
 
This section gives a short and concise but complete description of
/
each of the nine types of BASIC statements discussed earlier in this chapter.

-26-The notation 4 . . . > is used to denote a particular unspecified instance
of the type of thing referred to inside the( 7. Thus, (line numbe1> is
used to stand for anyparticular line number. (variablé refers to any
variable, which is a single letter possibly followed by a single digit.

(expression) stands for any particular expression, no matter how com-
plicated, so long as it follows the rules for forming expressions given in
section 2. Z . <number> stands for any constant or data number.

2. 6. l LET
 
Form:
Example:
Comment:
< line number) LET <Variable> = <expressiox>
100 LET x: x+1
259 LET W7 = (w - x4'1‘ 3)*(z - Al/(A -' s» - 17
The LET statement is not a statement of algebraic
equality, but is rather E—command to the computer to
perform certain computations and to assign the answer
to a certain variable. Thus, the ﬁrst example tells the
computer to take the current value of X, add 1 to it, and
assign the answer to the variable X. In other words, X
is increased by unity.

Z. 6. 2 ‘READ and DATA
 
Form:
Example:
Form:
Example:
Comment:
Comment:
 
< line number) READ Qist of variables>
150 READ X, Y, Z, X1, Y2, Z(K+I, J)
< line number> DATA (list of number§>
300 DATA 4, 2, 1.5, 0. 6734E-2, -l74. 321
A READ statement causes the variables listed in it to
be given in order the next available numbers in the col-
lection of DATA statements.
Before the program is run, the computer takes all the
DATA statements in the order in which they appear and
Creates a large data block. Each time a READ state-
' ment is encountered anywhere in the program, the data
block supplies the next available number or numbers. If
the data block runs out of data, with a READ statement
still asking for more, the program is assumed to be
dOne; "
-27-2. 6. 3 PRINT
2.6.4
Form: (line number> PRINT Qist of expressions to be
printed>
Example: 100 PRINT X, Y, z, B*B - 4*A*C, EXP(L<2)G(17))
Form: <line number> PRINT " (any string of characters) "
Example: 200 PRINT ”THIS PR<DGRAM Is NG G¢¢D. "
' 150 PRINT "C(DMPUTES X + Y = z" '
Comment: The numerical quantities printed need not be simple
variables, they may be any expressions. The expression
is first evaluated, then printed. There may be any number
of expressions separated by commas, but they will be
printed five to a line.

Example: 150 PRINT ”XII, HY”, ”le
Comment: Several messages may be included in the list separated
by commas. The effect is to print the letter X in the
first column, the letter Y in the 16th column, and the
letter Z in the 3lst column.

Example: 200 PRINT "X = ", X, "Y = ", Y
Comment: Labels and expressions may appear in the same print
' statement.

Comment: Much more variety is permitted in PRINT statements
than is shown here. The additional flexibility is ex-
plained in section 3. 1.

99 T_¢ El. IF-THEN
Form: <11ne number> GQ TO) <line numbe1>
Example: 150 G<DT<D 75
240 GO) T0 850
Comment: Sometimes called an unconditional go to, GO) T0) is
used to interrupt the normal sequence of executing
statements in the increasing order of their line numbers.

Form: I <1ine numbe r> IF <e>2ression> (relation)
. l
<expréssion> THEN
Example: ' 140 IF x 7 Y + 2 THEN 200
85 IF X * SIN(X) 7: 1 THEN 100
-23-Comment: Sometimes called a conditional go to. the IF-THEN
statement provides a way to select one of two sequences
, in the program dependingon‘the'results of some previous
computation. If the condition is met. the implied go to
is performed; if the condition is not met, the next
statement in sequence is performed. ‘ '
Any of the six standard relations may be used.

Symbol Me aning
< le 8 s than
<= less than or equal
= e qual
greater than or equal
greater than
/\V\/
> not equal
2.. 6.5 FQSRand NEXT
 
Form: _ <line‘number> F¢R (variable) = @xpression> T0)
' ' (expression> '
01‘
<line number> FQR <variable> = <expressior> TO)
(expression) STEP (expression) ‘
Example: 120 F<DR X4 = (17 + ca>S(A))/3 To) 3*SQR(10) STEP 1/4
(This represents the body of the loop.)

on...-
235 NEXT X4
Comment: Omitting the STEP part of the F¢R statement is equiva-
lent to having the stepsize equal to unity.

Comment: The above example will, assuming A to be equal to 0,
cause the body of the loop to be performed several
times, first with X4 equal to 6, next with X4 equal to
6. 25, then 6. 50, and so on. The last time the body of
the loop will ,be performed is with X4 equal to 9. 25,
which is less than or equal to the final value 9.486
(approximately).

The FQR statement goes into the body of a loop if the
variable has a value less than or equal to the final
-29-2.6.6
value (in the case of a positive stepsize), or if the vari-
able has a value greater than or equal to the final value.
(in the case of a negativej'stepsize. )
’ ‘ Upon leaving the loop,~ the program continues with the
Example:
- Comment:
Example :
Comment:
Example:
Comme nt:
END
 
Form:
Example:
Comment:-
statement following the NEXT; the variable used in the
F¢R statement then has the value it had during the last
pas sage through the 100p (I 9.. 2.5 in the above example.)

240 F¢RX = 8 T0) 3 STEP -1
The body of the loop is performed with X equal to
8, 7, 6, 5, 4, and 3, and X has the value 3 upon leaving
the loop.

456 F¢R J = -3 TO) 12 STEP 2
‘The body of the 100p will be performed with J equal to
-3, -l, l, 3, 5, 7, 9, and 11.
upon leaving the loop.

J will have the value 11
50 F051)» Z=2T¢ -2
The body of the loop will not be performed. Instead, the
computer will proceed to the statement immediately fol-
lowing the corre3ponding NEXT. The value of Z will
' then be 1, which is the initial value (2) minus the step
size (1).

<line number END’
999 :END
An END‘statement is required in all programs. It must
also be the statement with the highest line number in
the program.

-30-III
MORE: ADVANCED BASIC
3. 1 More About PRINT
 
 
One of the conveneinces of BASIC is that the format of answers is
automatically supplied for the beginner. The PRINT statement does, how-
ever, permit a greater flexibility for the more advanced programmer who
wishes to Specify a more elaborate output.

The teletype line is divided into five zones of fifteen spaces each
by BASIC, allowing the printing of up to five~ numbers per line. Three
simple rules control the use of these zones.

1. A label, in quotes, is printed just as it appears.

2. A comma is a signal to move to the next print zone,
or to the first print zone of the next line if it has
just filled the fifth print zone.

3. The end of a PRINT statement signals a new line, unless
a comma is the last symbol.

Each number occupies one zone. Each label occupies a whole number of
zones; if it occupies part of a zone, the rest of the zone is filled with
blanks. If a label runs through the fifth zone, part of it may be lost.

The examples on the following pages illustrate some of the various
ways in which the PRINT statement can be used. It should be noted that a
blank PRINT statement causes the typewriter to move to the next line, as
is implied by rule 3 above.

The format in which BASIC prints numbers is not under the control
of the user. However, the follOWing rules may be usedto guide the Program-
-31-NEW
NEW PRZBLEM NAME-~PRINTER
READY.

10 RA DELETED
10 READ A, B
20 PRINT “FIRST NZ. ="A, "SECUND N0. ="B
50 DATA 205’ -5017
40 END . g n
RUN ‘
USER Na. 999§§9" ‘PREBLEM NAMEs'PRINTE s SEPT. 1954 TIME: 21:52
FIRST NE. 2.5 SECQND NZ. 2-5.17
TIME: ”o‘SEcs:"‘
Comment: Notice that with no comma between the
label and the variable name, the label and
the value of the variable appear toqether.
But since the label and the number (with its
unprinted non-significant zeros) occupies
more than one zone, the second answer is
printed Starting in the third zone. This
,‘ I _I ._‘,, .,. . is in accordance with rule 2, which says that
SCRATCH ' ' we.do not start a new zone until a comma
READY. ;‘ ; is encountered.

10 FER I :"I~TE 12
20 PRINT I,
50 NEXT I”"‘
40 END
RUN
USER_NQ..99999$_ > PREBLEM NAME: PRINTE 6 SEPT. 1964 TIME: 21:55
1 2 5 4 5
6 7 8 ‘ 9 10
11 12
TIME: 0 SECS;' "
-32-USER NB. 999999 PROBLEM NAME: PRINT 6 SEPT. 1964 TIME: °
5 PRINT "THIS PRDGRAM CUMPUTES AND PRINTS THE NTH PUWERS"
6 PRINT “SF THE NUMBERS LESS THAN BR EQUAL TE N FER VARIUUS"
7 PRINT "N FRMM 1 THRZUGH 7."
8 PRINT
10 FiR N : 1 T5 7
15 PRINT "N : "N
20 DR I = 1 TE N
50 PRINT ITN,
40 NEXT I
5 PRINT
60 PRINT
70 NEXT N
80 END
RUN
:08
USER NU. 999999 PREBLEM NAME: PRINT 6 SEPT. 1964 TIME: 22:09
THIS PREGRAH CEMPUTES AND PRINTS THE NTH PEHERS
BF THE NUMBERS LEss THAN ER EQUAL TE N FER VARIﬂUS
N FREE 1 THRZUGH 7.

N = 1
l
N : 2
1 7 4.

N = 5
1 8. 27.

N = 4 _
1 16. 81. 256
N: 5
1 52. 245. 1024 5125.
N : 6
l 64. 729. 4096 15625.
46656.
N : 7
l 128. 2187. 16584 78125.
279956. 825545.

TIME: 2 SECS.

-33..mer in interpreting his printed results.

1. No more than six significant digits are printed (except for
integers -- see rule 4.)

2. Any trailing zeros after the decimal point are not printed.

3. For numbers less than 0. l, the form X. XXXXX E-Y is used
unless the entire significant part of the number can be printed
as a six decimal number. Thus, . 03456 means that the number
is exactly . 0345600000, while 3. 45600 E-Z means that the
number has been rounded to . 0345600
 
4. If the number is an exact integer, the decimal point is not
printed. Furthermore, integers of up through nine digits are
printed in full.

A packed form of output is available by using the character "; "in-
stead of ", " . Briefly, whereas"," tells the computer to move to the next
zone for the next answer, ; tells the computer to move to the beginning
of the next multiple of three characters for the next answer instead of to
the next zone, with six characters being the minimum. One can thus pack
many more than five numbers on a line if the numbers themselves require
less than a full zone to print. An example of this option is shown on the
next page.

With packed output using the semi-colon, the programmer can print
11 three digit numbers per line, 8 six digit numbers per line, or 6 nine
digit numbers per line. Mixtures of the three types in subsequent lines may
not line up, as the example shows. The user should be careful about using
the semi-colon with full length numbers which might occur near the end of
a print line. BASIC checks to see if there are 12 or more spaces at the end
of a line before printing a number there, but some numbers require 15
spaces. The same warning holds for printing labels near the end of the
line. In each case, the last few characters may be lost.

-34-10 FER
20 PRINT I*I*I;,
I = 1 T0 100
50 NEXT I
40 END
RUN
USER N8. 999999
1 8 .‘27
1728 ' 2197
8000 - 9261
21952 24589
46656 50655
85184 91125
140608 148877
216000 226981
514452 528509
438976- 456555
592704 614125
778688 804557
1000000
TIME: 2 6808.

PRQBLEM NAME: PRINT
64
2744
10648
27000
'54872
97336
157464
238328
343000
474552
636056
830584
125
216
3375
12167
29791
59319
103823
166375
250047
357911
493039
658503
857375
-35-
6 SEPT.
343* 512 729
4096 4913
13824 15625
32768 35937
64000 68921
110592 117649
175616 185193
262144 274625
373248 389017
512000 531441
681472 704969
884736 912673
1964
TIME: 22:14
1000
5832
17576'
39304
74088
125000
195112
287496
405224
551368
729000
941192
1331
6859
19683
42875
79507
132651
205379
300763
421875
571787
753571
9702993. 2 Lists and Tables
 
In addition to the ordinary variables used by BASIC, there are
variables that can be used to designate lists or tables. For instance, A(7)
would denote the seventh item in a list called A; ’B(3, 7) denotes the item
in the third row and seventh column of the table called B. We commonly
write A7 and B35 7 for those same items, and use the term subscripts
to denote the numbers that point to the desired items in the list or table.
(The reader may recognize that lists and tables are called, respectively,
vectors and matrices by mathematicians.)

The name of a list or table must be a single letter. The subscripts
may be any expression, no matter how complicated, as long as they have
non-negative integer values. The single letter denoting a list or table
name may also be used to denote a simple variable without confusion. How-
ever, the same letter may not be used to denote both a list and a. table in
the same program. The following are acceptable examples of list and table
items, though not necessarily in the same program:
B(I+K) B(I,K) Q(A(3,7),B-C)
The example on the next page shows a simple use of both lists and
tables in the same program. We might think of this program as one that
computes the total sales for each of five salesmen selling three different
goods. The list P gives the price of the three goods. The table S gives
the individual item sales of the five salesmen, where the rows stand for
the items and the columns for the salesmen. We assume that the items
sell for $1. 2.5, 4. 30, and 2.. 50, respectively, and that salesman 1 sold
40 of item 1, 10 of item 2, and 35 of item 3, and so on.USER
ID
20
30
4O
50
60
7O
80
90
100
110
120
130
140
150
200
210
220
250
500
RUN
USER
TGTAL
TSTAL
TETAL
TﬁTAL
TETAL
TIME:
NC. 999999
FSR 1 : 1 IS 3
READ P(I)‘ ’
13x1 1 _
FER 'I : 1 Ta 5
FSR J = 1 TE 5.
READ S(I,J)
NEXT J
NEXT I
FSR J : 1 IS 5
LET S : o
FSR I : 1 TS 5
LET S : s + P(I) * S<1,J>
NEXT I
PRINT "TGTAL SALES FSR SALESMAN "J,
NEXT J
DATA 1.25, 4.30, 2.50
DATA 40, 20, 37, 29,
DATA 10, 16, 5, 21,
DATA 55, 47, 29, 15,
END
NE. 999999 PRQBLEM NAME:
SALES FﬂR SALESMAN
SALES FDR SALESMAN
SALES FSR SALESMAN
SALES FSR SALESMAN
SALES FER SALESMAN
1 SECS.

PREBLEM NAME: SALES
42
8
55
\ﬂbCNNH
SALES
-37-
6 SEPT. 1964
II $IIS
6 SEPT. 1964
S
$
$
$
$
180.5
211.5
151.65
.166.55
169.4
TIME: 23:16
TIME: 23:17By way of explanation, lines 10 through 30 read in the values of
the list P . Lines 40 through 80 read in the values of the table S. .
Lines 90 through 150 compute the total sales for the five salesmen and
print each answer as it is computed. The computation for a single sales—
man takes place in lines 100 through 130. In lines 90 through 150, the
letter I stands for the good number, and the letter J stands for the sales-
man number .

BASIC provides that each list has a subscript running from 0 to 10,
inclusive. Each subscript in a table may run from 0 to 10. If the user
desires to have larger lists or tables, he may use a DIM statement in his
program. For example,
10 DIM A(l7)
indicates to the computer that the subscript of the list A runs from 0 to
17, inclusive; similarly,
20 DIM B(15, 20) , 8(3)
means that the subscripts of B run from 0 through 15 for rows, and 0
through 20 for columns, and that the subscript of the list S runs from 0
through 3. The numbers used to denote the size of a list or table in a DIM
statement must be integer numbers. The DIM statement is used not only
to indicate that lists and tables are larger than 0-10 in each subscript, but
also to allocate storage space in very large programs by telling the com-
puter that only, say, 4 spaces are needed for the list S as shown above.

It should be mentioned that using a DIM statement does not require
the user to use all of the spaces so allocated.

-38-3. 3 Functions and Subroutines
Two additional functions that are in the BASIC repertory but which
were not described in section 2.. 2 are INT and RND. INT is used to deter-
mine the integer part of a number that might not be a whole number. Thus
INT( 7. 8) is equal to 7 . As with the other functions, the argument of INT
may be any expression. One use of INT is to round numbers to the nearest
 
whole integer. If the number is positive, use INT(X'+ . 5) . The reader
should verify that this process is equivalent to the familiar process of
rounding. If the number is negative, INT(X - . 5) must be used. The reason
is that INT( -7. 8) is -7, not -8. INT always Operates by chopping off the
fractional part, whether the number is positive or negative.

INT can be used to round to any Specific number of decimal places.

Again, for positive numbers,
INT( 100*X + .5)/100
will round X to the nearest correct two decimal number.

The function RND produces a random number between 0 and 1. The
form of RND requires an argument, though the argument has no significance;
thus, we commonly choose a single letter such as X or Z, and use RND(X)
The property of RND is that it produces a new and different random
number each time it is used in a program. Thus, to produce and print 20
random digits, one might write a program like that shown on the next page.

The middle example shows that the next time the program is run,
the same sequence is obtained. To vary the sequence we might ”throw away"
an arbitrary number of random numbers at the start of the program. In the
third example at the bottom of the page, the first 115 random numbers are
-39-10 FER I = 1 T3 20
20 vPRINT -INT( 10*RND(X) );
50 NEXT I
40- END
.RUN
USER N0. 999999
'9 o 4 1 ' s 4 9
s s 9 5 4 o ._ 7
TIME: 1 5503.

RUN
USER NE. 999999 - PREBLEM NAME: RANDGM
9 o 4 1 s 4 9
6 6 9 s 4 o 7
TIME: 1 SECS.

10 READ N
20 FGR I ; 1 T6 N
30 LET x : RND<X>
40 sNEXT I . 9
5o FER 1 :‘1 T0 20
60 PRINT INT< 10*RND<X) >;
70 NEXT I _ ._ ,
so DATA '115
90 END
RUN
USER N0. 999999 PRQBLEM NAME; RANDZM
7 9 >9 . M0 . 9 4 5
2 "2 “ 4 " 2 0' o 0
'TIME:" 1 SECS.

-40-
PRGBLEM NAME: RANDQM
6 SEPT. 1964
6 SEPT. 1964
5 8
7 7
6 SEPT. 1964
9 . 9
5 5
TIME: 25:55
8
TIME: 25:54
. 8
TIME: 25:55
5discarded. The output shows random digits numbered 116 through 135.

Additional flexibility is provided in BASIC by three statements
that permit the use "of user-defined functiOns“ and subroutine-s.

The DEF statement permits the user to define a. function other than
the standard functions listed in section 2. 2‘ so that he doeisnit have to keep
repeating the formula for the function each time he uses it in his; program.
The name of a defined function must be three letters, the first two“ of
which are FN . The user thus may define up to 26 functions. The follow-
ing examples illustrate the form of the DEF statement:;
25 DEF FNF(Z) = SIN(Z*P) (where P has the vflue' 3‘. 14159265/180)
4o DEF FNL(X)“= L®G(X)/L<DG(10)
Thus, FNF is the sine function measured in degrees, and FNL is the func-
tion l‘og-to-the-base -ten.

The DEF statement may occur anywhere in the program. The user
needs to be cautioned that the variable used in" the DEF statement must not
be subscripted, and that it is used every time that function is used. Thus,
in a program containing FNF as above defined, it is best not to use the
variable Z elsewhere in the program.

The expression on the right of the equal sign" Can be any expres-
sion that can be fit into one line. It could involve many other variables
besides theo‘ne denoting the argument of the function; Thus,
60 ‘ DEF FNX(X) = SQR(X*X‘+ Y*Y)
may be used to set up a function that computes the square root of the sum
of the squares of X and Y. To use FNX, one might'use’ the following:
10 LET Y = 30
20 LET $1 = FNX(40)
-41..Qf course, SI would end up havingthe Value 50.

It should be notedvthat one. 5199? not need DEF unless the defined
function mustappear at two or morelocations in the program. Thus,
10 DEF FNF(Z) = SIN(Z*P)
zo LET P = 3.14159265/180
3o F¢RX=0T<D90
40 PRINT X, FNF(X)
50 NEXT X
60 END
might be more efficiently written as
20 LET P= 3.14159265/180
30 F<DR x=0T¢ 90
40 PRINT x, SIN(X*P)~
50 NEXT x
60 END
to compute a table of values of the sine function in degrees.

The use-of DEF is limited to those cases where the value of the
function can be computed within a single BASIC statement. Often much more
complicated functions, or perhaps even pieces of program that are not func-
tions, must be calculated at several different points within the program. For
this, the GQSUB statement may frequently be useful.

The form of a G¢SUB statement is illustrated as follows:
25 GOSSUB 180
The effect of the G¢SUB is exactly the same as a GQT¢ M that note is
taken by the computer as to where the. G¢SUB statement is in the program.
As soon as a RETURN statementis encountered, the computer automatical-
ly goes back to the statement immediately following the G¢SUB._ As a skele-
ton example, ‘
1007 LET, 1X: =23;
110 G<DSUB 400
120 PRINT U, V, W
(continued on next page)
“.42-(continued) l
200 LET X = 5
210 GQSUB 400
220 LET Z = U + 2*V + 3*W
I
400 LET U = X*X
410 LET V = X*X*X
420 LET W - X*X*X*X + X*X*X + X*X + X
430 RETURN
I
When statement 400 is entered by the G¢SUB 400 in line 110, the computa-
tions in lines 400, 410, and 420 are performed, after which the computer
goes back to statement 120. When the subroutine is entered from statement
2.10, the computer goes back to statement 2.20.

The user must be very careful not to write a program in which a
G¢SUB appears inside a subroutine which itself is entered via a G¢SUB; it
just won't work.

As a complete illustration, the next page contains a program that
determines the Greatest Common Div’isor of three integers, using the
celebrated Euclidean algorithm as a subroutine. The subroutine is contain-
ed in lines 200 to 310, and is applied to two integers only. The main routine
applies this subroutine to the first two integers, and then to the. GCD of
these and the third integer. The GCD is then printed, and a new case con-
sidered.

3. 4 Some Ideas for More Advanced Programmers
—. —-———-—u—p—
 
 
 
An important part of any computer program is the description of
what it does, and what data should be supplied. This description is com-
monly called documentation. One of the ways a computer program can be
documented is by supplying remarks along with the program itself. BASIC
provides for this capability with the REM statement. For example,
-43-USER N0. 999999 PRGBLEM NAME: GCDSNQ 6 SEPT. 1964 TIME: 25:27
10 PRINT ”A", ”B", "C", "3CD":
20 READ A, B, C
50 LET X : A
-40 LET Y : B H ._
50 GQSUB 200
60 LET X : G
70 LET Y =
80 GGSUB 200 ‘ “ "
90 PRINT A, B, C, G»
100 GE TE 20 “ ' "
110 DATA 60, 90, 120 _ .,
120 DATA 58456, 64872, 98765 ”
150 DATA 52, 584, 72 ,
200 LET Q INTCX/Y)
210 LET R X - Q*Y
220 IF,R = 0 THEN 500
250 LET X
240 LET Y
250VGGIT0“
300 LET G
510 RETURN
999 END
Y
R , , ‘2.. ,
oo s“.v x.“ =€'%-mw
Y
ll Nu ll
RUN
USER N2. 99§99§ A PRaaLEm NAME: ecnsum s SEPT. 1964 TIME: 25:28
A B c GCD
so 4'. :“2‘ 90 ‘.,:2,.120 ' 50
38456 64872 98765 1
52. ,,,.\ ~ 1 384 ' ::'u*~=72 ’ 8.

TIME: 1 SECS.

-44-' REM THISPRoGRA‘M SCDLVES mnm munrwmor THE FORM
REM A1*X1 + A2*XZ = 31‘ A3*X1 + A4#x3 = B2. THE DATA
”REM ”MUST FIRST LIST THEWBRVALE-Es @FAIN QSRDER, THEN
REM: THE DESIRED RIGHT HAND SIDES Fem WHICH SOLUTIONS
REM. ARE NEEDED
mﬁWNh-r
might reasonably be added to the original example £or solving linear equa-
tions. For longer programs, more detailed REM's may be needed, espe-
cially ones spotted throughout the program to remind you what each of the
parts does. Each user quickly learns how much documentation he needs to
permit him to understand his program, and where to put REM statements.
But it is certain that REM's are needed in any saved program. It should be
emphasized that REM's have absolutely no effect on the computation.

Sometimes a program will have two or more natural ending points.
In such a case the programmer might use a. G¢TQ to the END statement.
Such a statement can be replaced by a STQP, with nothing following the
word STOP. Thus,
400 G®TCD 999
710 G¢TQ§ 999
999 END
may be replaced by
400 STCDP
710 STCDP
999 END
BASIC allows GO) TO) and IF-THEN statements to point to REM and
DATA statements. The effect is to per£0rm a vacuous statement having
-45-that number and proceed-to the nextnumbered statement. In the case of
DATA statements, the END statement might eventually be reached How-
I ever, for REM statements the programmer might deliberately have his
G®T¢'s point to REM statements, the remark part identifying that part of
the program. V
One of the ‘most important" and difficult problems in computing is
that of round-off error. It exerts its influence in subtle ways, and some-
times; in ways not so subtle. A full treatment of the effects of round-off
error is beyond the scope of this manual, but one fairly common situation
will be discussed.

Most programmers eventually write or encounter a program some-
thing like this:
5’ LETs=o“
10 ,LETX=0
2‘0 LETS=S+X' ‘
30 IF X): 2 THEN 60
4o LETX= X+.1
50 G0) TCD 20
60 PRINT S
70 END
for computing the sum of all the non-negative multiples of . 1 less than or
equal to 2.. The correct answer is 2.1, but invariably the program will pro-
duce 23. 1 as the answer. What is wrong? Round-off has reared its ugly
head high enough for us to see. The explanation is that the computer works
in the binary number system, and cannot express . l exactly. Just as 1/3
cannot be expressed in terms of a single decimal number, neither can . 1
be expressed in terms of a single. binary number. It turns out that . l in
the computer is a number very slightly less than . 1. Thus, when the loop
in the above example has been performed 21 times, the value of X is not
2 exactly, but is very elightly less than 2.. The IF statement in line 30
+46-ds-mtmia” that the final value, exactly a, has got yet been aehieved or ex-
coededo and so calls, for one more gases-gs through the lﬂﬂﬂg
If the programmer had known thatm summer treat-s .-, 1 as a
number slightly less, he could have commuted by writing 1, 95 in place
of 2 in statement 30. A better way rests QR W $62!: that the computer per-
forms exactly c0rrect arithmetic for integerg, The two: may thus count
the number of times through the loop with integers, The example may be
rewritten as follows: ‘
5 LET S = 0
10 LET N = 0
20 LET S=S+N/10
30 IF N): 20 THEN 60
40 LET N = N + l
50 G¢T¢ 20
60 PRINT S
70 END
Better still, a FCDR statement can shorten the program to
10 LET X = 0
20 F¢R N = 1 T0) 20
30 LETS=S+N/10
40 NEXT N
50 PRINT S
60 END
One of the most exasperating problems confronting programmers is
that of a fairly long and complex program that looks as if it should work
simply refuses to do so. (Presumably, all errors of form have been detect-
ed and'removed.) The locating and removing of logical errors is called
debugging, and the methods to be used depend on the nature of the program ' '
and also on the programmer himself. Anlimportant part of debugging is
intuition, but‘it is. possible to suggest some approaches that might be use-
ful in many cases.

The first thing to do with an apparently incorrect program is-"t-o 'chéck' very Carefully't'h‘e" method 'v‘u‘sed. "If that doesn't uncover the bug,
then examine’veir’y; carefully'yot'if-"ﬁro'gramming to see if you have mixed
up any of the variables. Itis> often difficult to spot such errors because,
_ I
one tends to seem a program‘what he expects to see rather than what is
there.

Another method that’is'extr‘eimely useful in providing clues as to the
nature "and 10cation-df the'bug or "bugs is tracing. 'In BASIC this tracing may
be accomplished by inserting superfluous PRINT statements at‘various
places in your program to print the values of some of the intermediate
quantities. When the program isthen RUN, the values of these intermediate
quantities often suggest the exact nature‘of the error. When the program
has been debugged and is working properly, these statements are removed.

There"ar‘é‘somé'ztrfatte'r's' that do net affect the correct running of
programs, but pertain to style and neatne‘ss. For instance, as between two
or more similar ways to prepare apart of a program, one should select
the one that is most easily understood unless there is an important reason
not to do so.

. More experienced programmers will tend to group the data in DATA
statements so’that itreflects the READ statements that correspond. The
‘first example on linear Lequationsu represents} bad style, but was, done pur-
posely to illustrate that one can arbitrarily group the data in the DATA
statements .

IOne- tends” after “a Whil‘égto‘pla'ce his data statements near the ‘end
of the program, or near the beginning, but at least in one group to avoid
confusing himself .With. DATA statements spread throughout the program.

\“348-Same programmers also tend to give the END statement a number like
9999 to insure that it will be the one with the highest number.

No, deubt the user will be able to dcvioe ether ways to make a" pro-
gram neat and readable. But again, the impertant can-ideration in style is
to program in a way that makes it more underptandahle and useful to both
oneself and others in the future.. I31 .' f: Iv
CARDBASIC
‘4. 1 Fur ose’
A card-operated (oneline) yersion of BASIC is available and pro-
vides the following advantages over teletypes:
(1) Longer programsareaallovsIed. : .
(2) There is no limit on DATA.
(3) Output is on the highspeed printer. This is much faster and
allows 8 numbers per line in the normal format, and up to
18 in packed format.

(4) Matrix subroutines are available.

4. 2 How 2 Prepare a Deck.

 
 
You punch on cards a program almost exactly the way you would
type it on a teletype, with one instruction per card. Due to the fact that
there are fewer symbols on a key-punch, the following modifications are
needed:
In PRINT, use single quote (') in place of quote (”).

For the relational symbols, use the following three letter equivalents.

EQU
LSS
GR T
LQU
GQU
NQU
A .
VYCFVA"
In place of a semi-colon in a PRINT statement, you must use a
5-8 multiple punch.

4. 3 Differences in Operation.

Do not type DATA as part of your program deck. Instead, add to the
-50-end of your program.(after the END card) a data deck. There are no line
numbers for data, and the word DATA should not appear. Just a list of
numbers, ”separated by commas. You may put as'many or as few numbers
on one card as you wish.

There is a new instruction PAGE. This starts a new printed page
for the output.

There is a series of matrix subroutines available as part of the
new instruction MAT. See the next section for a detailed description.

I You have much larger Lmatrices available. The limitations are:
(1) At most 1000 components in any one vector or list.
(2.) No matrix or table dimension may exceed 500.

(3) The total number of components in all vectors and
matrices (lists and tables) may not exceed 4000.

' Matrices must start with component 1 (not 0).

4. 4 MAT
 
Matrix subroutines are available in CARDBASIC. They are called
by means of the MAT instruction. Observe the following restrictions: (1)
A matrix in an MAT instruction must have had a DIM declared. (2) While
the same matrix may appear in an MAT and an arithmetic statement, it
must occur for the first time in an MAT statement.

Allowed MAT operations are:
MAT READ A(M, N) Read one matrix, dimensions shown.
MAT PRINT A Print one matrix. .
MAT C = A + B Add two matrices.

MAT C = A - B Subtract matrices.

(continued on next page)
-51-MAT -C = A * B Multiply 'matarim.

MAT . C = ‘ZER(M, N) Introduce :a 8 matrix, dimensions shown.

,' MAT C = -C¢N('M, N) Matrix of all 1‘s, dimensions shown.

MAT C = 1DN(N) Identity matrix,- dimeasion shown.

MAT C = TRN(A): Transpos-e.

MAT c = INV(A) ' Inverse.

MAT C = (k)*A Constant maltipie,note ,parent-hesese.
In ‘approPriate places, vectors may be substituted im- matriees. E. g. ,
MAT READ A(7) will read a 7-component column Vector. MAT PRINT
prints all vectors as row-vectors, for convenience. M and N may be form-
ulas. Thus one has the possibility of writing
DIM ' A(20, 20)
READ M
MAT READ A(M, M)
This allows A to be any square matrix up to 20 x 20, its actual dimension
specified in the data. If MAT PRINT A is followed by a 5-8 multiple punch,
matrices will be printed in the ”;" packed format.

.52-V
APPENDICES
APPENDIXA -- Error Messages-
 
The various error messages that can occur in, BASIC, together
with their interpretation, are now given:
 
Error Message Interpretation
DIMENSKDN Tam) LARGE The size of a list or table is too large
for the available storage. Make them
smaller. (See Appendix B. )
ILLEGAL _CQ5NSTANT More than nine digits or incorrect form
in a constant number. ‘
ILLEGAL FCDRMULA Perhaps the most common error mes-
sage, may indicate missing parentheses,
illegal variable names, missing multiply
signs, illegal numbers, or many other
errors. Check the statement thoroughly.

ILLEGAL RELATION Something is wrong with the relational
' expression in an IF-THEN statement.
Check to see if you used one of the six
permissable relational symbols.

ILLEGAL LINE NUMBER Line number is of incorrect form, or
' - contains more than five digits.

ILLEGAL INSTRUCTKDN - Other than one of the fifteen legal BASIC
* instructions has been used following the
line number.

ILLEGAL~VARLAB LE An illegal variable name has been used.

INCCDRRECT FQ)RMAT The format of an instruction is wrong.
, See especially IF-THEN's and FGR'S.

END IS NCDT LAST “ Self-explanatory, it also occurs if
there are two or more END statements
in the program.

NO) END INSTR‘UCTICDN ‘ The program has no END statement.

-53-N03 DATA
UNDEFINED FUNCTKDN
UNDEFINED NUMBER
PRQGRAM Tied: LQNG
ITGSCD MUCH DATA
Too) MANY LABELS
Tao) MANY L¢¢Ps
Nor MATCH WITH F¢R
FCDR WITHO>UT NEXT
CUT PRQGRAM (DR DIMS.

SUBSCRIPT ERRQR
ILLEGAL RETURN
There is at least one READ statement in
the program, but no DATA statements.

A function such "as FNF( ) has been used
without appearing in a DEF statement.
Check for typographical errors. .

The statement number appearing in a G05
Ta) or IF-THEN statement does not appear
as a line number in the program.

Either the program itself is too long for
the available liter-age, .Or there are too
many constants and printed label‘s.

(See Appendix B.)

There is too much data in the program.
(See Appendix B. )
The total length of all printed labels in
the program exceeds the limit. (See
Appendix B.)

There are too many ‘FQR-NEXT combin-
ations in the program. The upper limit
is 26. (See Appendix B.)

An incorrect NEXT statement, perhaps
with a wrong variable given. Also, check
for incorrectly nested FQR statements.

A missing NEXT statement, This mes-
sage can also occur in conjunction with
the previous one.

Either the program is too long, or the
amount of space reserved by the DIM
statements is too much, or a combina-
tion of these. This message can be elim-
inated by either cutting the length of the
program, or by reducing the size of the
lists and tables. ’
A subscript has been called for that lies
outside the range specified in the DIM
statement, or if no DIM statement applies,
outside the range 0 through 10.

Occurs if a RETURN is encountered be-
fore the first GCDSUB during the running
of a program. (Note: BASIC does not re-
quire the GQSUB to have an earlier state-
ment number -- only to perform a GCDSUB
before performing a RETURN. )
-54-APPENDIX B -- Limitations 93 BASIC
 
Thereare some limitations imposed on BASIC by’the limited amount
of computer storage. Listed below are some of these limitations, in particu-
lar.,, those that are related to the error messages in APPENDIX A. The read—
er should realize that while the BASIC language itself is fixed, in time some
of these limitations may be relaxed slightly.

 
Item Limitation .
Length of program Difficult to relate to the BASIC program,
but in general about two feet of teletyp'e
paper filled with BASIC statements is
about it.

Constants and printed labels The total number of constants and differ-
ent printed labels must not exceed 175.

Data V) There can be no more than 300 data
numbers. '
Length of printed labels The total length of printed labels cannot
exceed something slightly less than 600
characters.

FCDR statements There can be no more than 26 F<DR state-
ments in a. program.

GO) TQ and IF-TI—IEN statements The total number of these statements
combined cannot exceed 80.

Lists and Tables The total number of elements in all the
lists and tables combined cannot exceed
1500.

-55-APPENDIX C -- Summary of the 15 BASIC Statements
—-————-—
 
 
In this summary it is assumed that all statements begin with a line
number. Following each is one example.

LET
READ
DATA
PRINT
G¢T®
IF- THEN
F 0R
NEXT
LET -<variable) : (expression)
10 LETX1=Y+Z+(Z /A-B’I‘m)
READ (variable) , <Variable> , . .. . <yariab1e>
10 READ X, Y, z , A1, Q(I,. J)
DATA <number> , <number> . . . . , <number>
10 DATA 1, 2, -3, 7, 123. 479, -Z. 35E-4
PRINT <1abe1> , or <1abe1> <expression‘ , or
10 PRINT "SINE", "X = " X(I, K), A + B*C(DS(Y)
GQTQ) <1ine number>
10 G¢T¢ 17
IF <ex§ression> éelationa1> <expression> THEN
' <iine numbe1>
lOIF X+Y > 0 THEN419
F¢R (unsubscripted variable = (expression) T0)
<expressior> STEP '<expressior>r
10FQRI=1T¢17
10 F¢R X1: 0 T0) 7 STEP 0.5
NEXT (urns ubs cripted variable)
10 NEXT XI
(continued on next page)(continued)
END
STQ5P
DEF
G¢S UB
RETURN
DIM
REM
END
10 END
ST<7>P
10 ST<DP
DEF FN <16tter> ((unsubscripted variab1e>) =- <expressior?

10 DEF FNG(Z) = 1+SQR(1+ 2* Z)
G¢SUB <1ine number>
10 GQ§SUB 110
RETURN
10 RETURN
DIM <1etter> ( (integer) ), or <1etter> (‘ (integei? .
' <‘nteger> )
10 DIM A(17), 13(3, 20)
REM <any string of characters whatsoever>
10 REM THIS IS THE END OF APPENDIX C
-57-NOTES
-58..
