program = line , { line } ;
line = line_number , statement , [ statement_separator , statement ] , eol ;
line_number = digit , { digit } ;
digit = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0" ;
statement_separator = ":" ;
eol =  ( cr , lf ) | cr ;
number = integer | integer , "." , integer ;
integer = digit , { digit } ;
cr = "\n" ; 
lf = "\f" ;
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
character = letter | digit | symbol ;
symbol =  "|" | " " | "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "\" | "]" | "^" | "_" | "`" | "{" | "}" | "~" ;
statement = change_statement | data_statement | def_statement | dim_statement | end_statement | for_statement | gosub_statement | goto_statement | if_statement | input_statement | let_statement | next_statement | on_statement | print_statement | read_statement | rem_statement | restore_statement | return_statement | stop_statement ;
change_statement = "CHANGE" , ((string_variable , "TO" , numeric_variable) | (numeric_variable , "TO" , string_variable)) ;
data_statement = "DATA" , number , [ "," number ] ;
def_statement = "DEF FN" , letter , "(" , variable , ")" , "=" , expression ;
dim_statement = "DIM" , ( "(" , integer , ")" | ( "(" , integer , separator , integer , ")" ) );
end_statement = "END" ;
for_statement = "FOR" , numeric_variable , "=" , expression , "TO" , expression , [ "STEP" , expression ] ;
gosub_statement = "GOSUB" , line_number ;
goto_statement = "GOTO" , line_number ;
if_statement = "IF" , relation , "THEN" , line_number ;
input_statement = "INPUT" , variable , [ "," , variable ] ;
let_statement = "LET" , variable , "=" , expression ;
next_statement = "NEXT" , numeric_variable ;
on_statement = "ON" , expression , ("GOTO" | "THEN" ) , line_number , {[ "," , line_number]} ;
print_statement = "PRINT" list , { ("," | ";") , list } ;
list = string | variable | expression | tab_function ;
read_statement = "READ" , variable { "," , variable } ;
rem_statement = "REM"  [ , remark ] ;
restore_statement = "RESTORE" ;
return_statement = "RETURN" ;
stop_statement = "STOP" ;
remark = { character } ;
relation = expression relop expression ;
relop = "<" | ">" | "=" | "<=" | ">=" ;
variable = numeric_variable | string_variable ; 
numeric_variable = numeric_single_variable | numeric_array_variable ;
string_variable = string_single_variable | string_array_variable;
numeric_single_variable = letter , [digit] ; 
numeric_array_variable = letter , [digit] , "(" , expression [ separator , expression ] , ")" ;
string_single_variable = letter , [digit] , "$"; 
string_array_variable = letter , [digit] , "$" , "(" , expression [ separator , expression ] , ")" ;
expression = term [ addop , term ] ;
addop = "+" | "-" ;
term = factor [ mulop factor ] ;
mulop = "*" | "/" ;
factor = number | string | variable | function | "(" , expression , ")" ;
function = sin_function | cos_function | tan_function | arctan_function | exponent_function | absolute_function | logarithm_function | square_root_function | def_function | integer_function | random_function  ;
separator = "," ;
string = quote , [ character , { character } ] , quote ;
quote = '"' ;	
sin_function = "SIN" , "(" , expression , ")" ;
cos_function = "COS" , "(" , expression , ")" ;
tan_function = "TAN" , "(" , expression , ")" ;
arctan_function = "ATAN" , "(" , expression , ")" ;
exponent_function = "EXP" , "(" , expression , ")" ;
absolute_function = "ABS" , "(" , expression , ")" ;
logarithm_function = "LOG" , "(" , expression , ")" ;
square_root_function = "SQR" , "(" , expression , ")" ;
def_function = "FN" , letter , "(" , variable , ")" ;
integer_function = "INT" , "(" , expression , ")" ;
random_function = "RND" , "(" , expression , ")" ;
tab_function = "TAB" , "{" , expression , ")" ;






